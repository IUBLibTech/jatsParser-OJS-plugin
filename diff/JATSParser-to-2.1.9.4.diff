diff JATSParser.2.1 JATSParser.2.9

diff -r JATSParser.2.1/JATSParser/src/JATSParser/Back/AbstractReference.php JATSParser.2.9/JATSParser/src/JATSParser/Back/AbstractReference.php
2a3
> use docx2jats\jats\Element;
32a34,37
> 	protected $rawReference = '';
>
> 	protected $isMixed = false;
>
55a61,66
>
> 		$citNode = $this->getFirstChildElement($reference);
> 		if ($citNode) {
> 			if ($citNode->tagName === 'mixed-citation') $this->isMixed = true;
> 			$this->rawReference = $citNode->nodeValue;
> 		}
64c75
< 				$property = $searchNode->nodeValue;
---
> 				$property = htmlspecialchars(trim($searchNode->nodeValue));
153a165,194
> 	}
>
> 	/**
> 	 * @return bool
> 	 * @brief check if it's mixed citation (may have untagged text)
> 	 */
> 	public function isMixed(): bool {
> 		return $this->isMixed;
> 	}
>
> 	/**
> 	 * @return string
> 	 * @brief contains only the text/nodeValue of the reference node
> 	 */
> 	public function getRawReference(): string {
> 		return $this->rawReference;
> 	}
>
> 	/**
> 	 * @param \DOMElement $el
> 	 * @return \DOMElement|null
> 	 * @brief return the first child element that is a DOMElement, e.g., to avoid DOMText children
> 	 */
> 	protected function getFirstChildElement(\DOMElement $el): ?\DOMElement {
> 		foreach ($el->childNodes as $refChild) {
> 			if ($refChild->nodeType === XML_ELEMENT_NODE) {
> 				return $refChild;
> 			}
> 		}
> 		return null;
155c196
< }
\ No newline at end of file
---
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Back/Journal.php JATSParser.2.9/JATSParser/src/JATSParser/Back/Journal.php
135c135,144
< }
\ No newline at end of file
---
>
> 	public function getPages(): string
> 	{
> 		$pages = '';
>
> 		if (!empty($this->getFpage()) && !empty($this->getLpage())) $pages = $this->getFpage() . '-' . $this->getLpage();
>
> 		return $pages;
> 	}
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Body/AbstractElement.php JATSParser.2.9/JATSParser/src/JATSParser/Body/AbstractElement.php
79a80,83
>
> 	static function mappedBlockElements() {
> 		return ["Figure" => "fig", "Table" => "table-wrap"];
> 	}
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Body/Document.php JATSParser.2.9/JATSParser/src/JATSParser/Body/Document.php
126a127,131
> 						if (!empty($par->getBlockElements())) {
> 							foreach ($par->getBlockElements() as $blockElement) {
> 								$articleContent[] = $blockElement;
> 							}
> 						}
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Body/Media.php JATSParser.2.9/JATSParser/src/JATSParser/Body/Media.php
43c43
< 	public function getLabel(): string
---
> 	public function getLabel(): ?string
51c51
< 	public function getLink(): string
---
> 	public function getLink(): ?string
59c59
< 	public function getId(): string
---
> 	public function getId(): ?string
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Body/Par.php JATSParser.2.9/JATSParser/src/JATSParser/Body/Par.php
9,11c9,10
< 	/**
< 	 *   @var $content array
< 	 */
---
> 	private $content = array();
> 	private $blockElements = array();
13,14d11
< 	private $content;
<
16a14,18
>
> 		// Find, set and exclude block elements from DOM
> 		$this->findExtractRemoveBlockElements($paragraph, $xpath);
>
> 		// Parse content
27a30,65
> 	}
>
> 	public function getBlockElements() {
> 		return $this->blockElements;
> 	}
>
> 	/**
> 	 * @param \DOMElement $paragraph
> 	 * @param \DOMXPath $xpath
> 	 * @brief Method aimed at finding block elements inside the paragraph, save as an array property and delete them from the DOM
> 	 */
> 	private function findExtractRemoveBlockElements(\DOMElement $paragraph, \DOMXPath $xpath): void
> 	{
> 		$expression = "";
> 		$blockNodesMappedArray = AbstractElement::mappedBlockElements();
> 		$lastKey = array_key_last($blockNodesMappedArray);
> 		foreach ($blockNodesMappedArray  as $key => $nodeString) {
> 			$expression .= ".//" . $nodeString;
> 			if ($key !== $lastKey) {
> 				$expression .= "|";
> 			}
> 		}
>
> 		$blockElements = $xpath->query($expression, $paragraph);
> 		if (empty($blockElements)) return;
>
> 		foreach ($blockElements as $blockElement) {
> 			if ($className = array_search($blockElement->tagName, $blockNodesMappedArray)) {
> 				$className = "JATSParser\Body\\" . $className;
> 				$jatsBlockEl = new $className($blockElement);
> 				$this->blockElements[] = $jatsBlockEl;
> 			}
>
> 			$blockElement->parentNode->removeChild($blockElement);
> 		}
>
29c67
< }
\ No newline at end of file
---
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Body/Section.php JATSParser.2.9/JATSParser/src/JATSParser/Body/Section.php
85c85
< 		foreach ($sectionNodes as $sectionElement) {
---
> 		foreach ($sectionNodes as $key => $sectionElement) {
89a90,94
> 					if (!empty($par->getBlockElements())) {
> 						foreach ($par->getBlockElements() as $blockElement) {
> 							$content[] = $blockElement;
> 						}
> 					}
diff -r JATSParser.2.1/JATSParser/src/JATSParser/Body/Text.php JATSParser.2.9/JATSParser/src/JATSParser/Body/Text.php
74,82d73
<
< 		/* text inside table cells needs special treatment */
< 		if ($parentNode->nodeName == "p") {
< 			$parentNodeOfParent = $parentNode->parentNode;
< 			if ($parentNodeOfParent->nodeName == "th" || $parentNodeOfParent->nodeName == "td") {
< 				$this->type[] = $parentNode->nodeName;
< 				$this->extractTextNodeModifiers($parentNode);
< 			}
< 		}
84c75
< }
\ No newline at end of file
---
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/HTML/Cell.php JATSParser.2.9/JATSParser/src/JATSParser/HTML/Cell.php
45c45
< }
\ No newline at end of file
---
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/HTML/Document.php JATSParser.2.9/JATSParser/src/JATSParser/HTML/Document.php
6a7,8
> use Seboettg\CiteProc\StyleSheet;
> use Seboettg\CiteProc\CiteProc;
7a10,13
> define('JATSPARSER_CITEPROC_STYLE_DEFAULT', 'vancouver');
> define('JATSPARSER_CITEPROC_LANG_DEFAULT', 'en-US');
> define('JATSPARSER_REFERENCE_ELEMENT_ID', 'referenceList'); // Document::getRawReferences() linked to this id
>
10c16,24
< 	public function __construct(JATSDocument $jatsDocument, $parseReferences = true) {
---
> 	/** @var $citationStyle string  */
> 	var $citationStyle;
>
> 	var $citeProcReferences;
> 	var $styleInTextLinks;
> 	var $citationLang;
> 	var $jatsDocument;
>
> 	public function __construct(JATSDocument $jatsDocument) {
13a28
> 		$this->jatsDocument = $jatsDocument;
15c30
< 		$articleSections = $jatsDocument->getArticleSections();
---
> 		$articleSections = $this->jatsDocument->getArticleSections();
16a32
> 	}
18c34,45
< 		if ($jatsDocument->getReferences() && $parseReferences) $this->extractReferences($jatsDocument->getReferences());
---
> 	/**
> 	 * @param string $citationStyle see: https://github.com/citation-style-language/styles
> 	 * @param string $lang language for citation styling
> 	 * @param bool $styleInTextLinks whether to style in-text links to references
> 	 */
> 	public function setReferences(string $citationStyle = JATSPARSER_CITEPROC_STYLE_DEFAULT, string $lang = JATSPARSER_CITEPROC_LANG_DEFAULT, bool $styleInTextLinks = false): void {
> 		$this->citationStyle = $citationStyle;
> 		$this->citationLang = $lang;
> 		$this->styleInTextLinks = $styleInTextLinks;
> 		if (!empty($this->jatsDocument->getReferences())) {
> 			$this->extractReferences($this->jatsDocument->getReferences());
> 		}
104c131
< 	private function extractContent(array $articleSections, \DOMElement $element = null): void {
---
> 	protected function extractContent(array $articleSections, \DOMElement $element = null): void {
178c205
< 	private function extractReferences (array $references): void {
---
> 	protected function extractReferences (array $references): void {
186,189c213,214
< 		$referenceList = $this->createElement("ol");
< 		$referenceList->setAttribute("class", "references");
< 		$this->appendChild($referenceList);
<
---
> 		$data = [];
> 		$rawData = [];
191,193c216,223
< 			$htmlReference = new Reference();
< 			$referenceList->appendChild($htmlReference);
< 			$htmlReference->setContent($reference);
---
> 			$citeProcRef = new Reference($reference);
> 			if (!$citeProcRef->refIsEmpty()) {
> 				$data[] = $citeProcRef->getContent();
> 			} elseif ($citeProcRef->getJatsReference()->isMixed() && !empty(trim($citeProcRef->getJatsReference()->getRawReference()))) {
> 				$rawData[] =$citeProcRef->getJatsReference();
> 			} else {
> 				error_log("WARNING: reference with id " . $reference->getId() . " is invalid and cannot be parsed");
> 			}
194a225,389
>
> 		$this->citeProcReferences = $data;
>
> 		$style = StyleSheet::loadStyleSheet($this->getCitationStyle());
>
> 		$wrapIntoListItem = function($cslItem, $renderedText) {
> 			return '<li id="' . $cslItem->id .'">' . $renderedText . '</li>';
> 		};
>
> 		$additionalMarkup = [
> 			'bibliography' => [
> 				'csl-entry' => $wrapIntoListItem
> 			]
> 		];
>
> 		$citeProc = new CiteProc($style, $this->citationLang, $additionalMarkup);
> 		$htmlString = $citeProc->render($data, 'bibliography');
>
> 		if ($this->styleInTextLinks) {
> 			$this->setInTextLinks($citeProc, $data);
> 		}
>
> 		$this->getCiteBody($htmlString, $rawData);
> 	}
>
> 	protected function getCiteBody(string $htmlString, array $rawData) {
> 		$document = new \DOMDocument('1.0', 'utf-8');
> 		$document->loadXML($htmlString);
>
> 		$listEl = $this->createElement('ol');
> 		$listEl->setAttribute('class', 'references');
> 		$listEl->setAttribute('id', JATSPARSER_REFERENCE_ELEMENT_ID);
> 		$this->appendChild($listEl);
>
> 		$xpath = new \DOMXPath($document);
> 		$listItemEls = $xpath->query('//li');
> 		foreach ($listItemEls as $listItemEl) {
> 			$newListItemEl = $this->createElement('li');
> 			$newListItemEl->setAttribute('id', $listItemEl->getAttribute('id'));
> 			$listEl->appendChild($newListItemEl);
>
> 			$nodeList = $xpath->query('div[@class="csl-right-inline"]/node()', $listItemEl);
> 			if ($nodeList->count() > 0) {
> 				foreach ($nodeList as $node) {
> 					$newNode = $this->importNode($node, true);
> 					$newListItemEl->appendChild($newNode);
> 				}
> 			} else {
> 				$nodeList = $xpath->query('node()', $listItemEl); {
> 					foreach ($nodeList as $node) {
> 						$newNode = $this->importNode($node, true);
> 						$newListItemEl->appendChild($newNode);
> 					}
> 				}
> 			}
> 		}
> 		// Append data from mixed citation nodes that don't contain valid ref data for CSL
> 		foreach ($rawData as $rawRefObject) {
> 			$newListItemEl = $this->createElement('li');
> 			$newListItemEl->setAttribute('id', $rawRefObject->getId());
> 			$textRefNode = $this->createTextNode(trim($rawRefObject->getRawReference()));
> 			$newListItemEl->appendChild($textRefNode);
> 			$listEl->appendChild($newListItemEl);
> 		}
> 	}
>
> 	protected function setInTextLinks($citeProc, $data) {
>
> 		$xpath = new \DOMXPath($this);
> 		$links = $xpath->query('//a[@class="bibr"]');
> 		foreach ($links as $link) {
> 			$linkId = $link->getAttribute('href');
> 			if ($linkId) {
> 				$citeObject = new \stdClass();
> 				$citeObject->id = str_replace("#", "", $linkId);
> 				$link->nodeValue = $citeProc->render($data, "citation", [$citeObject]);
> 			}
> 		}
> 	}
>
> 	public function getCitationStyle(): string {
> 		return $this->citationStyle;
> 	}
>
> 	public function saveAsValidHTML(string $documentTitle, bool $prettyPrint = false): string {
> 		if ($prettyPrint) {
> 			$xpath = new \DOMXPath($this);
> 			$nodes = $xpath->query('//text()');
> 			foreach ($nodes as $node) {
> 				$node->nodeValue = preg_replace("/[\\s]{2,}/", " ", $node->nodeValue);
> 			}
> 		}
>
> 		$htmlString = $this->saveAsHTML();
>
> 		$htmlString =
> 			'<!doctype html>' . "\n" .
> 			'<html lang="">' . "\n" .
> 			'<head>' . "\n" .
> 			"\t" . '<meta charset="UTF-8">' . "\n" .
> 			"\t" . '<title>' . htmlspecialchars($documentTitle) . '</title>' . "\n" .
> 			'</head>' . "\n" .
> 			'<body>' . "\n" .
> 			$htmlString .
> 			'</body>'. "\n" .
> 			'</html>';
>
> 		return $htmlString;
>
> 	}
>
> 	public function saveAsHTML($element = null) {
>
> 		$htmlString = $element ? $this->saveXML($element) : $this->saveXML($this);
>
> 		$xmlDeclaration = '<?xml version="1.0" encoding="UTF-8"?>';
> 		$pos = strpos($htmlString, $xmlDeclaration);
> 		if ($pos !== false) {
> 			$htmlString = substr_replace($htmlString, '', $pos, strlen($xmlDeclaration));
> 		}
>
> 		return $htmlString;
> 	}
>
> 	/**
> 	 * @param string $filename path to the file to write a file
> 	 * @param string $documentTitle document title that is required for HTML to be valid
> 	 * @param bool $prettyPrint
> 	 * @return void
> 	 */
> 	public function saveAsValidHTMLFile(string $filename, string $documentTitle, bool $prettyPrint = true): void {
> 		file_put_contents($filename, $this->saveAsValidHTML($documentTitle, $prettyPrint));
> 	}
>
> 	/**
> 	 * @return array of references, where key is unique id, ordered according to appearance in JATS XML
> 	 */
> 	public function getRawReferences(): array {
> 		$references = [];
>
> 		$refListEl = null;
>
> 		// DOMDocument::getElementById or xpath analog won't work presumably because the absence of a root element
> 		foreach ($this->getElementsByTagName('ol') as $ol) {
> 			if ($ol->getAttribute('id') == JATSPARSER_REFERENCE_ELEMENT_ID) {
> 				$refListEl = $ol;
> 			}
> 		}
>
> 		if (!$refListEl) return $references;
>
> 		foreach ($refListEl->childNodes as $refItemEl) {
> 			$htmlString = '';
> 			foreach ($refItemEl->childNodes as $refContent) {
> 				$htmlString .= $this->saveAsHTML($refContent);
> 			}
>
> 			if ($refItemEl->hasAttribute('id')) {
> 				$references[$refItemEl->getAttribute('id')] = $htmlString;
> 			} else {
> 				$references[] = $htmlString;
> 			}
> 		}
>
> 		return $references;
diff -r JATSParser.2.1/JATSParser/src/JATSParser/HTML/Figure.php JATSParser.2.9/JATSParser/src/JATSParser/HTML/Figure.php
17c17
<
---
>
22c22
<
---
>
25,27c25,26
< 		$srcNode->setAttribute("src", $jatsFigure->getLink());
<
<
---
> 		$srcNode->setAttribute("src", rawurlencode($jatsFigure->getLink()));
>
43c42
<
---
>
55c54
<
---
>
68,69c67,68
<
< }
\ No newline at end of file
---
>
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/HTML/Par.php JATSParser.2.9/JATSParser/src/JATSParser/HTML/Par.php
15d14
< 		/* @var $jatsText JATSText */
17d15
<
19d16
<
22c19
< }
\ No newline at end of file
---
> }
diff -r JATSParser.2.1/JATSParser/src/JATSParser/HTML/Reference.php JATSParser.2.9/JATSParser/src/JATSParser/HTML/Reference.php
4a5
> use JATSParser\Back\Individual;
11c12
< class Reference extends \DOMElement {
---
> class Reference {
13c14,16
< 	public function __construct() {
---
> 	/** @var $content \stdClass */
> 	private $content;
> 	private $jatsReference;
15,16c18,20
< 		parent::__construct("li");
<
---
> 	public function __construct(AbstractReference $jatsReference) {
> 		$this->jatsReference = $jatsReference;
> 		$this->setContent();
19c23,24
< 	public function setContent(AbstractReference $jatsReference) {
---
> 	public function setContent() {
> 		if (!isset($this->content)) $this->content = new \stdClass();
21c26
< 		$this->setAttribute("id", $jatsReference->getId());
---
> 		$this->setSimpleProperty('id', 'getId');
23,24c28,34
< 		switch (get_class($jatsReference)) {
< 			case "JATSParser\Back\Journal":
---
> 		if (!empty($this->jatsReference->getAuthors())) {
> 			foreach ($this->jatsReference->getAuthors() as $individual) {
> 				if (get_class($individual) == 'JATSParser\Back\Individual') { /** @var $individual Individual */
> 					$author = new \stdClass();
> 					if (!empty($individual->getGivenNames())) {
> 						$author->family = $individual->getSurname();
> 					}
26c36,38
< 				/* @var $jatsReference Journal */
---
> 					if (!empty($individual->getSurname())) {
> 						$author->given = $individual->getGivenNames();
> 					}
28c40
< 				// extracting reference authors
---
> 					$this->content->author[] = $author;
30c42,44
< 				ReferenceMethods::extractAuthors($jatsReference, $this);
---
> 				}
> 			}
> 		}
32c46,52
< 				// exctracting reference body
---
> 		if (!empty($this->jatsReference->getEditors())) {
> 			foreach ($this->jatsReference->getEditors() as $individual) {
> 				if (get_class($individual) == 'JATSParser\Back\Individual') { /** @var $individual Individual */
> 					$editor = new \stdClass();
> 					if (!empty($individual->getGivenNames())) {
> 						$editor->family = $individual->getSurname();
> 					}
34,37c54,56
< 				if ($jatsReference->getTitle()) {
< 					$journalTitle = $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getTitle())). ".");
< 					$this->appendChild($journalTitle);
< 				}
---
> 					if (!empty($individual->getSurname())) {
> 						$editor->given = $individual->getGivenNames();
> 					}
39,41c58
< 				if ($jatsReference->getJournal()) {
< 					$journalName = $this->ownerDocument->createElement("i", htmlspecialchars( " " . trim($jatsReference->getJournal())) . ".");
< 					$this->appendChild($journalName);
---
> 					$this->content->editor[] = $editor;
42a60,61
> 			}
> 		}
44,50c63,64
< 				if ($jatsReference->getYear() != '' && ($jatsReference->getVolume() == '' && $jatsReference->getIssue() == '' && $jatsReference->getFpage() == '' && $jatsReference->getLpage() == '')) {
< 					$journalYear = $this->ownerDocument->createTextNode(" " . $jatsReference->getYear() . ". ");
< 					$this->appendChild($journalYear);
< 				} elseif ($jatsReference->getYear() != '') {
< 					$journalYear = $this->ownerDocument->createTextNode(" " . $jatsReference->getYear() . ";");
< 					$this->appendChild($journalYear);
< 				}
---
> 		$this->setSimpleProperty('url', 'getUrl');
> 		$this->setSimpleProperty('title', 'getTitle');
52,55c66,75
< 				if ($jatsReference->getVolume() != '' && $jatsReference != '') {
< 					$journalVolume = $this->ownerDocument->createTextNode(" " . $jatsReference->getVolume());
< 					$this->appendChild($journalVolume);
< 				}
---
> 		// specific properties
> 		if (checkdate(1, 1, (int) $this->jatsReference->getYear())) {
> 			$this->setDate('issued', 'getYear');
> 		}
> 		$this->setSimpleProperty('container-title', 'getJournal');
> 		$this->setSimpleProperty('journal', 'getJournal');
> 		$this->setSimpleProperty('volume', 'getVolume');
> 		$this->setSimpleProperty('issue', 'getIssue');
> 		$this->setSimpleProperty('page-first', 'getFpage');
> 		$this->setSimpleProperty('page', 'getPages');
57,63c77,84
< 				if ($jatsReference->getIssue() != '' && $jatsReference->getVolume() != '') {
< 					$journalIssue = $this->ownerDocument->createTextNode("(" . $jatsReference->getIssue() . ")");
< 					$this->appendChild($journalIssue);
< 				} elseif ($jatsReference->getIssue() != '' && $jatsReference->getVolume() == '') {
< 					$journalIssue = $this->ownerDocument->createTextNode(" " . $jatsReference->getIssue());
< 					$this->appendChild($journalIssue);
< 				}
---
> 		if (method_exists($this->jatsReference, 'getPubIdType') && array_key_exists('doi', $this->jatsReference->getPubIdType())) {
> 			$doi = $this->jatsReference->getPubIdType()['doi'];
> 			// Can't pass URL, see https://github.com/Vitaliy-1/JATSParserPlugin/issues/63
> 			if (self::isDoiUrl($doi)) {
> 				$doi = substr_replace($doi, '', 0, strlen(DOI_REFERENCE_PREFIX));
> 			}
> 			$this->content->{'DOI'} =$doi;
> 		}
65,68c86,91
< 				if (($jatsReference->getFpage() != '' || $jatsReference->getLpage() != '') && ($jatsReference->getVolume() != '' || $jatsReference->getIssue() != '')) {
< 					$betweenFAndLPage = $this->ownerDocument->createTextNode(":");
< 					$this->appendChild($betweenFAndLPage);
< 				}
---
> 		$this->setSimpleProperty('publisher', 'getPublisherName');
> 		$this->setSimpleProperty('publisher-place', 'getPublisherLoc');
> 		$this->setSimpleProperty('container-title', 'getBook');
> 		$this->setSimpleProperty('event', 'getConfName');
> 		$this->setDate('event-date', 'getConfDate');
> 		$this->setSimpleProperty('event-place', 'getConfLoc');
70,76c93
< 				if ($jatsReference->getFpage() != '' && $jatsReference->getLpage() == '') {
< 					$fpage = $this->ownerDocument->createTextNode($jatsReference->getFpage() . '. ');
< 					$this->appendChild($fpage);
< 				} elseif ($jatsReference->getFpage() != '') {
< 					$fpage = $this->ownerDocument->createTextNode($jatsReference->getFpage());
< 					$this->appendChild($fpage);
< 				}
---
> 		switch (get_class($this->jatsReference)) {
78,84c95
< 				if ($jatsReference->getLpage() != '' && $jatsReference->getFpage() != '') {
< 					$lpage = $this->ownerDocument->createTextNode("-" . $jatsReference->getLpage() . '. ');
< 					$this->appendChild($lpage);
< 				} elseif ($jatsReference->getLpage() != '' && $jatsReference->getFpage() == '') {
< 					$lpage = $this->ownerDocument->createTextNode($jatsReference->getLpage() . '. ');
< 					$this->appendChild($lpage);
< 				}
---
> 			case "JATSParser\Back\Journal":
86c97,98
< 				ReferenceMethods::extractLinks($jatsReference, $this);
---
> 				/* @var $jatsReference Journal */
> 				$this->content->type = 'article-journal';
92c104
< 				ReferenceMethods::extractAuthors($jatsReference, $this);
---
> 				$this->content->type = 'book';
94,123d105
< 				if ($jatsReference->getTitle() != '') {
< 					$bookTitle = $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getTitle())). ".");
< 					$this->appendChild($bookTitle);
< 				}
<
< 				if ($jatsReference->getPublisherName() != '' && $jatsReference->getPublisherLoc() != '') {
< 					$pubName= $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getPublisherName()). ":"));
< 					$this->appendChild($pubName);
< 				} elseif ($jatsReference->getPublisherName() != '' && $jatsReference->getPublisherLoc() == '' && $jatsReference->getYear() != '') {
< 					$pubName= $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getPublisherName()). ";"));
< 					$this->appendChild($pubName);
< 				} elseif ($jatsReference->getPublisherName() != '' && $jatsReference->getPublisherLoc() == '' && $jatsReference->getYear() == '') {
< 					$pubName= $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getPublisherName()). ". "));
< 					$this->appendChild($pubName);
< 				}
<
< 				if ($jatsReference->getPublisherLoc() != '' && $jatsReference->getYear() != '') {
< 					$pubLoc = $this->ownerDocument->createTextNode( " " . htmlspecialchars(trim($jatsReference->getPublisherLoc() . ";")));
< 					$this->appendChild($pubLoc);
< 				} elseif ($jatsReference->getPublisherLoc() != '' && $jatsReference->getYear() == '') {
< 					$pubLoc = $this->ownerDocument->createTextNode( " " . htmlspecialchars(trim($jatsReference->getPublisherLoc() . ". ")));
< 					$this->appendChild($pubLoc);
< 				}
<
< 				if ($jatsReference->getYear() != '') {
< 					$year = $this->ownerDocument->createTextNode(' ' . htmlspecialchars(trim($jatsReference->getYear())) . '. ');
< 					$this->appendChild($year);
< 				}
<
< 				ReferenceMethods::extractLinks($jatsReference, $this);
129c111
< 				// extracting reference authors
---
> 				$this->content->type = 'chapter';
131,191d112
< 				ReferenceMethods::extractAuthors($jatsReference, $this);
<
< 				if ($jatsReference->getTitle() != '') {
< 					$chapterTitle = $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getTitle())) . ". ");
< 					$this->appendChild($chapterTitle);
< 				}
<
< 				if (!empty($jatsReference->getEditors())) {
< 					$editorsBlock = $this->ownerDocument->createTextNode("In: ");
< 					$this->appendChild($editorsBlock);
< 					ReferenceMethods::extractEditors($jatsReference, $this);
< 				}
<
< 				if ($jatsReference->getBook() != '') {
< 					$chBookTitle = $this->ownerDocument->createElement("i");
< 					$chBookTitle->nodeValue = " " . htmlspecialchars(trim($jatsReference->getBook())) . ". ";
< 					$this->appendChild($chBookTitle);
< 				}
<
< 				if ($jatsReference->getPublisherName() != '' && $jatsReference->getPublisherLoc() != '') {
< 					$chapterPubName = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getPublisherName())) . ": ");
< 					$this->appendChild($chapterPubName);
<
< 				} elseif ($jatsReference->getPublisherName() != '' && $jatsReference->getPublisherLoc() == '' && $jatsReference->getYear() != '') {
< 					$chapterPubName = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getPublisherName())) . "; ");
< 					$this->appendChild($chapterPubName);
< 				} elseif ($jatsReference->getPublisherName() != '' && $jatsReference->getPublisherLoc() == '' && $jatsReference->getYear() == '') {
< 					$chapterPubName = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getPublisherName())) . ". ");
< 					$this->appendChild($chapterPubName);
< 				}
<
< 				if ($jatsReference->getPublisherLoc() != '' && $jatsReference->getYear() != '') {
< 					$chapterPubLoc = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getPublisherName())) . "; ");
< 					$this->appendChild($chapterPubLoc);
< 				} elseif ($jatsReference->getPublisherLoc() != '' && $jatsReference->getYear() == '') {
< 					$chapterPubLoc = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getPublisherName())) . ". ");
< 					$this->appendChild($chapterPubLoc);
< 				}
<
< 				if ($jatsReference->getYear() != "" && ($jatsReference->getFpage() != '' || $jatsReference->getLpage() != '')) {
< 					$chapterYear = $this->ownerDocument->createTextNode($jatsReference->getYear() . ":");
< 					$this->appendChild($chapterYear);
< 				} elseif ($jatsReference->getYear() != '') {
< 					$chapterYear = $this->ownerDocument->createTextNode($jatsReference->getYear() . ". ");
< 					$this->appendChild($chapterYear);
< 				}
<
< 				if ($jatsReference->getFpage() != '' && $jatsReference->getLpage() != '') {
< 					$chapterFpage = $this->ownerDocument->createTextNode($jatsReference->getFpage() . "-");
< 					$this->appendChild($chapterFpage);
< 				} elseif ($jatsReference->getFpage() != '' && $jatsReference->getLpage() == '') {
< 					$chapterFpage = $this->ownerDocument->createTextNode($jatsReference->getFpage() . ".");
< 					$this->appendChild($chapterFpage);
< 				}
<
< 				if ($jatsReference->getLpage()) {
< 					$chapterLpage = $this->ownerDocument->createTextNode($jatsReference->getLpage() . ". ");
< 					$this->appendChild($chapterLpage);
< 				}
<
< 				ReferenceMethods::extractLinks($jatsReference, $this);
197c118
< 				// extracting reference authors
---
> 				$this->content->type = 'conference';
199c120,122
< 				ReferenceMethods::extractAuthors($jatsReference, $this);
---
> 				break;
> 		}
> 	}
201,204c124,130
< 				if ($jatsReference->getTitle() != '') {
< 					$chapterTitle = $this->ownerDocument->createTextNode(" " . htmlspecialchars(trim($jatsReference->getTitle())) . ". ");
< 					$this->appendChild($chapterTitle);
< 				}
---
> 	/**
> 	 * @return array
> 	 */
> 	public function getContent(): \stdClass
> 	{
> 		return $this->content;
> 	}
206,209c132,141
< 				if ($jatsReference->getConfName() != '') {
< 					$conferenceTitle = $this->ownerDocument->createTextNode("Paper presented at: " . htmlspecialchars(trim($jatsReference->getTitle())) . "; ");
< 					$this->appendChild($conferenceTitle);
< 				}
---
> 	/**
> 	 * @param $property string JSON property
> 	 * @param $method string method to retrieve property from JATS Parser Reference
> 	 * @return void
> 	 */
> 	protected function setSimpleProperty(string $property, string $method): void {
> 		if (method_exists($this->jatsReference, $method) && !empty($this->jatsReference->$method())) {
> 			$this->content->{$property} = $this->jatsReference->$method();
> 		}
> 	}
211,220c143,149
< 				if ($jatsReference->getConfDate() != '' && $jatsReference->getYear() != '' && $jatsReference->getConfLoc() != '') {
< 					$conferenceDate = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getConfDate())) . ", ");
< 					$this->appendChild($conferenceDate);
< 				} elseif ($jatsReference->getConfDate() != '' && $jatsReference->getYear() == '' && $jatsReference->getConfLoc() != '') {
< 					$conferenceDate = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getConfDate())) . "; ");
< 					$this->appendChild($conferenceDate);
< 				} elseif ($jatsReference->getConfDate() != '' && $jatsReference->getYear() == '' && $jatsReference->getConfLoc() == '') {
< 					$conferenceDate = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getConfDate())) . ". ");
< 					$this->appendChild($conferenceDate);
< 				}
---
> 	protected function setDate(string $property, string $method): void {
> 		if (method_exists($this->jatsReference, $method) && !empty($this->jatsReference->$method())) {
> 			$date = new \stdClass();
> 			$date->{'date-parts'}[][] = $this->jatsReference->$method();
> 			$this->content->{$property} = $date;
> 		}
> 	}
222,228c151,162
< 				if ($jatsReference->getYear() != '' && $jatsReference->getConfLoc() != '') {
< 					$conferenceYear = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getYear())) . '; ');
< 					$this->appendChild($conferenceYear);
< 				} elseif ($jatsReference->getYear() != '' && $jatsReference->getConfLoc() == '') {
< 					$conferenceYear = $this->ownerDocument->createTextNode(htmlspecialchars(trim($jatsReference->getYear())) . '. ');
< 					$this->appendChild($conferenceYear);
< 				}
---
> 	/**
> 	 * @return bool
> 	 * @brief checks if generated CJSON-CSL doesn't contain ref specific info, e.g., title, authors, year.
> 	 * TODO find a better way of CSL validation
> 	 */
> 	public function refIsEmpty(): bool {
> 		$csl = (array) $this->content;
> 		// ID and type are assigned irrespectively to the reference content
> 		unset($csl['id']);
> 		unset($csl['type']);
> 		return empty($csl);
> 	}
230,235c164,165
<
< 				ReferenceMethods::extractLinks($jatsReference, $this);
< 				break;
<
<
< 		}
---
> 	public function getJatsReference(): AbstractReference {
> 		return $this->jatsReference;
238c168,171
< }
\ No newline at end of file
---
> 	public static function isDoiUrl($doi) {
> 		return substr($doi, 0, strlen(DOI_REFERENCE_PREFIX)) === DOI_REFERENCE_PREFIX;
> 	}
> }
